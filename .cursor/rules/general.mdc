---
description: 
globs: 
alwaysApply: false
---
---
description: WPForms Cursor General Rules
globs: 
alwaysApply: true
---
By default use git repository in plugins directory.

# General code style rules:
- Use tabs instead of spaces for indentation at the beginning of the line.
- Comments in the code must be in English and end with a period.

# Core Principles
- Adhere to PHP and WordPress best practices for consistency and readability.
- Emphasize object-oriented programming (OOP) for better modularity.
- Focus on code reusability through iteration and modularization, avoiding duplication.
- Use descriptive and meaningful functions, variables, and file names.
- Follow existing project directory naming conventions.
- Use WordPress hooks (actions and filters) to extend functionality.
- Add explicit, descriptive comments to improve code clarity and maintainability.
    
# PHP/WordPress Coding Practices
- Utilize features of PHP 7.2+ where applicable.
- Follow WordPress PHP coding standards throughout the codebase.
- Values inside parentheses must have one space between value and each parenthesis. This is also required for brackets and curly braces.
- Leverage core WordPress functions and APIs wherever possible.
- Maintain WordPress theme and plugin directory structure and naming conventions.
- Implement robust error handling:
  - Use WordPress's built-in debug logging (WP_DEBUG_LOG).
  - Apply try-catch blocks for controlled exception handling.
- Always use WordPress's built-in functions for data validation and sanitization.
- Ensure secure form handling by verifying nonces in submissions.
- For database interactions:
  - Use WordPress's $wpdb abstraction layer.
  - Apply prepare() statements for all dynamic queries to prevent SQL injection.
  - Use the dbDelta() function to manage database schema changes.

# JavaScript
  - Use short arrow function syntax.

# Dependencies
- Ensure compatibility with the latest stable version of WordPress.
- Use Composer for dependency management in advanced plugins or themes.

# WordPress Best Practices
- Use WordPress's user roles and capabilities to manage permissions.
- Apply the transients API to cache data and optimize performance.
- Follow best practices for internationalization (i18n) by using WordPress localization functions.
- Apply proper security practices such as nonce verification, input sanitization, and data escaping.
- Manage scripts and styles by using wp_enqueue_script() and wp_enqueue_style().
- Store configuration data securely using WordPress's options API.

# Key Conventions
- Follow WordPress's plugin API to extend functionality in a modular and scalable manner.
- Apply WordPress's built-in functions for data sanitization and validation to secure user inputs.
- For custom queries, use $wpdb or WP_Query for database interactions.
- For AJAX requests, use admin-ajax.php or the WordPress REST API to handle backend requests.
- Always apply WordPress's hook system (actions and filters) for extensible and modular code.
- Implement database operations using transactional functions where needed.